{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\Modal.svelte"
  ],
  "sourcesContent": [
    "<script>\n\t// components\n\timport Modal from './Modal.svelte';\n\n\t// forms\n\timport Form from './Form.svelte';\n\n\t// let name = 'Yoshi';\n\tlet beltClr = 'black';\n\n\tlet firstName = 'Jimmy';\n\tlet lastName = 'Handrix';\n\n\t// reactive value\n\t$: fullName = `${firstName} ${lastName}`;\n\n\t$: {\n\t\tconsole.log(beltClr);\n\t\tconsole.log(fullName);\n\t}\n\n\t// event handlers\n\tconst handleClick = () => {\n\t\tbeltClr = 'red';\n\t};\n\n\tconst handleInput = (e) => {\n\t\tbeltClr = e.target.value;\n\t};\n\n\t// loops\n\tlet people = [\n\t\t{ name: 'yoshi', beltClr: 'black', age: 25, id: 1 },\n\t\t{ name: 'mario', beltClr: 'red', age: 45, id: 2 },\n\t\t{ name: 'luigi', beltClr: 'orange', age: 35, id: 3 }\n\t];\n\n\t// inline event handlers\n\tconst handleDelete = (id) => {\n\t\t// delete the person from people array\n\t\tpeople = people.filter(person => person.id != id);\n\t\t// we have to reasign because svelte looks for reasignment, to check\n\t\t// if something has been updated\n\t};\n\n\t// conditionals\n\tlet num = -5;\n\n\t// event forwarding\n\tlet showModal = false;\n\n\tconst toggleModal = () => {\n\t\tshowModal = !showModal;\n\t};\n\n\t// slots\n\tlet showSlotModal = false;\n\n\tconst toggleSlotModal= () => {\n\t\tshowSlotModal = !showSlotModal;\n\t};\n\n\t// forms\n\tlet showForm = false;\n\n\tconst openForm= () => {\n\t\tshowForm = !showForm;\n\t};\n\n\t// custom event dispatch\n\tconst addPerson = (e) => {\n\t\tconsole.log(e.detail);\n\n\t\tconst person = e.detail;\n\n\t\tpeople = [person, ...people];\n\n\t\tshowForm = false;\n\t};\n</script>\n\n<!-- components -->\n<!-- and props -->\n<!-- <Modal propsMsg=\"Hey, I am a prop value!\" isPromotion={true} showModal={showModal}/> -->\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   <!-- event forwarding -->\n<Modal propsMsg=\"Hey, I am a prop value!\" isPromotion={true} {showModal} on:click={toggleModal}/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<!-- when prop name and \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue variable name\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tare the same, we can use \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshorthand {showModal}-->\n\n<!-- slots -->\n<Modal propsMsg=\"\" {showSlotModal} on:click={toggleSlotModal}>\n\t<h3>Add a new person</h3>\n\n\t<!-- named slots -->\n\t<div slot=\"details\">\n\t\t<h5>Add a new Ninja and his belt color!</h5>\n\t</div>\n</Modal>\n\n<!-- forms -->\n<Modal propsMsg=\"\" {showForm} on:click={openForm}>\n\t<!-- utilizing custom event dispatch here on form -->\n\t<Form on:addPerson={addPerson} />\n</Modal>\n\n<main>\n\t<h2>reactive values | binding values/two way data binding</h2>\n\t<!-- <h1>Hello {name}!</h1> -->\n\t<!-- <p style=\"color:{beltClr}\">{beltClr} belt!</p> -->\n\t<!-- <p>{firstName} {lastName} - {beltClr} belt!</p> -->\n\t<!-- using reactive value -->\n\t<p>{fullName} - {beltClr} belt!</p>\n\n\t<!-- <button on:click={handleClick}>Update belt color</button> -->\n\n\t<!-- two way data binding -->\n\t<!-- <input type=\"text\" on:input={handleInput} value={beltClr}> -->\n\n\t<!-- shorthand way of doing the above -->\n\t<input type=\"text\" bind:value={firstName}>\n\t<input type=\"text\" bind:value={lastName}>\n\t<input type=\"text\" bind:value={beltClr}>\n\n\t<hr>\n\t<h2>loops | conditionals | event handlers</h2>\n\t<!-- loops -->\n\t{#each people as person (person.id)}\n\t\t<div>\n\t\t\t<h4>{person.name}</h4>\n\t\t\t<!-- conditional -->\n\t\t\t{#if person.beltClr === 'black'}\n\t\t\t\t<p><strong>MASTER NINJA</strong></p>\n\t\t\t{/if}\n\t\t\t<p>{person.age} years old, {person.beltClr} belt!</p>\n\t\t\t<button on:click={() => handleDelete(person.id)}>Delete</button>\n\t\t\t<!-- to prevent automatically invoked function, we wrap that function\n\t\t\tin an inline function, which is not automatically invoked when the code runs -->\n\t\t</div>\n\t{:else}\n\t<!-- if array is empty it will default to what ever is in {:else} -->\n\t\t<p>There are no people to show!</p>\n\t{/each}\n\t<!-- when using each loop in svelte, we should also apply unique key to each\n\t\t element in array (id,in this case)\n\t\t which means that svelte can use that key to keep track of which DOM\n\t\t element is connected to which item in the array\n\t\t useful for manipulating data, later on -->\n\n\t<hr>\n\t<h2>conditionals</h2>\n\t<!-- conditionals -->\n\t{#if num > 20}\n\t\t<p>Num is greater than 20!</p>\n\t{:else if num > 5}\n\t\t<p>Num is greater than 5!</p>\n\t{:else}\n\t\t<p>Num is not greater than 5!</p>\n\t{/if}\n\n\t<hr>\n\t<h2>events | props | conditional styles | event forwarding and event modifiers</h2>\n\n\t<button on:click={toggleModal}>Show Modal</button>\n\t<!-- open modal button that works only once with event modifier -->\n\t<button on:click|once={toggleModal}>Show Modal Once</button>\n\n\t<hr>\n\t<h2>slots/named slots & forms</h2>\n\n\t<button on:click={toggleSlotModal}>Show Slot Modal</button>\n\n\t<button on:click={openForm}>Open Form</button>\n\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\t/* h1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t} */\n\n\th2 {\n\t\tcolor: cornflowerblue;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>",
    "<script>\r\n    // forms\r\n    import Form from './Form.svelte';\r\n    \r\n    export let showModal = false;\r\n\r\n    // conditional class for conditional styles\r\n    // let isPromotion = true;\r\n\r\n    // props\r\n    export let propsMsg;\r\n    export let isPromotion = false;\r\n    // to pass prop from outside of this component we must export it\r\n    // export let propsMsg = 'Default value';\r\n    // default value can alse be given\r\n\r\n    // event modifiers\r\n    // some of the more common ones are:\r\n    // once - makes sure that event can only fire once (removes handler)\r\n    // preventDefault - prevent the default action\r\n    // self - only fires the event if the clicked element is the target\r\n\r\n    // slots/named slots\r\n    export let showSlotModal = false;\r\n\r\n    // forms\r\n    export let showForm = false;\r\n\r\n</script>\r\n\r\n<!-- === MOCK UP === -->\r\n{#if showModal} \r\n    <!-- <div class=\"backdrop\" class:promotion={isPromotion} on:click> -->\r\n                                                    <!-- not defining on click event here\r\n                                                    means that we want to \"event forward\" it\r\n                                                    onto the parent element that is \r\n                                                    using this components -->\r\n        <div class=\"backdrop\" class:promotion={isPromotion} on:click|self>\r\n                                                                <!-- event modifier -->\r\n\r\n        <div class=\"modal\">\r\n            <!-- passing prop from another component -->\r\n            <p>{propsMsg}</p>\r\n        </div>\r\n    </div>\r\n{/if}\r\n\r\n<!-- slots -->\r\n{#if showSlotModal}\r\n    <div class=\"backdrop\" on:click|self>\r\n        <div class=\"modal\">\r\n            <!-- named slot -->\r\n            <slot name=\"details\"></slot>\r\n\r\n            <slot></slot>\r\n        </div>\r\n    </div>\r\n{/if}\r\n\r\n<!-- forms -->\r\n{#if showForm}\r\n    <div class=\"backdrop\" on:click|self>\r\n        <div class=\"modal\">\r\n            <Form />\r\n        </div>\r\n    </div>\r\n{/if}\r\n\r\n<style>\r\n    .backdrop {\r\n        position: fixed;\r\n        width: 100%;\r\n        height: 100%;\r\n        background: rgba(0, 0, 0, .7);\r\n    }\r\n\r\n    .modal {\r\n        padding: 10px;\r\n        border-radius: 10px;\r\n        max-width: 500px;\r\n        margin: 10% auto;\r\n        text-align: center;\r\n        background: royalblue;\r\n        border: 4px solid #eee;\r\n    }\r\n\r\n    .promotion .modal {\r\n        background: crimson;\r\n        border: 4px solid #eee;\r\n    }\r\n</style>"
  ],
  "names": [],
  "mappings": "AAkLC,IAAI,eAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AASD,EAAE,eAAC,CAAC,AACH,KAAK,CAAE,cAAc,AACtB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,eAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC;ACnIE,SAAS,8BAAC,CAAC,AACP,QAAQ,CAAE,KAAK,CACf,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,AACjC,CAAC,AAED,MAAM,8BAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,IAAI,CACnB,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,GAAG,CAAC,IAAI,CAChB,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,SAAS,CACrB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC1B,CAAC,AAED,yBAAU,CAAC,MAAM,eAAC,CAAC,AACf,UAAU,CAAE,OAAO,CACnB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC1B,CAAC"
}